# nginx 配置准则
#   1. 必须 仅支持 https 访问，http 访问默认转为 https
#   2. 同时支持 IPv4 和 IPv6
#   3. 仅支持 TLSv1.3
#   4. 加密套件仅支持 椭圆曲线加密算法
server {
    listen                          80 default_server;
    listen                          [::]:80 default_server;
    server_name                     bpm.kaseihaku.com;

    # 任何 http 协议访问当前网站，都自动转为 https 协议
    return      301 https://${server_name}:443${request_uri};
}


server {
    # ssl                   表示是 https 服务
    # default_server        表示域名匹配不上其他 server_name 时，使用当前 server 提供服务
    #                       @trap 只要 IP+Port 不同，就可以定义一个 default_server，所以可能存在多个 default_server
    #
    # server_name 匹配逻辑:
    #   function matchLogic(httpRequest) {
    #       if( "Host" Request Header 存在 ){
    #           使用 Host 的值进行匹配;
    #           if(匹配成功){
    #               return 匹配到的 server{}
    #           }
    #       }
    #       if(default_server 存在){
    #           return 包含 default_server 的 server{};
    #       }
    #       return nginx.conf 中第一个 server{};
    #   }
    #   @doc https://nginx.org/en/docs/http/request_processing.html
    # 匹配优先级为：精确域名 > * 开头的最长域名 > * 结尾的最长域名 > 第一个匹配的正则表达式(根据在配置文件中的出现顺序)
    # @trap 最准的是直接看日志，log_format 已经包含最终调用的 server{} 了
    listen              443 ssl http2 default_server;
    listen              [::]:443 ssl http2 default_server;
    server_name         bpm.kaseihaku.com;

    # 证书配置
    ssl_certificate             /etc/nginx/tls/bpm/server.crt.pem;         # 当前 域名 对应的 证书
    ssl_certificate_key         /etc/nginx/tls/bpm/pvt.key.pem;            # 当前 证书 对应的 私钥
    #ssl_password_file          /etc/nginx/tls/bpm/pvt.key.pwd;            # 当前 私钥 对应的 密码，一行一个

    # TLS/SSL 配置
    ssl_protocols                   TLSv1.3;
    ssl_ciphers                     TLSv1.2+ECDH+ECDSA+AESGCM;      # openssl cipher string: 用于设置使用的加密套件
    ssl_ecdh_curve                  auto;       # 指定 ECDHE 运算所使用的 曲线
    ssl_prefer_server_ciphers       on;         # 优先使用服务器上配置的 加密套件
    ssl_session_timeout             8m;         # 会话过期时间


    ################################ CORS 跨域请求配置 ################################
    # 配置步骤:
    #   - 删除 代理目标服务器返回 的 CORS Resp Header，防止给 client 返回多个相同的 Access-Control-* , 从而导致报错。
    #     proxy_hide_header Access-Control-*
    #   - 添加 nginx 自己的 CORS Resp Header
    #     add_header Access-Control-*
    #

    # 将原始请求 request header 透传到目标服务器
    #proxy_pass_request_headers on;

    # 禁止将 目标服务 指定的 response header 传递给 client
    proxy_hide_header Access-Control-Allow-Origin;
    proxy_hide_header Access-Control-Allow-Methods;
    proxy_hide_header Access-Control-Allow-Headers;
    proxy_hide_header Access-Control-Expose-Headers;
    proxy_hide_header Access-Control-Max-Age;


    # 允许将目标服务器的指定 response header 返回给 client
    #proxy_pass_header Access-Control-Allow-Origin;
    #proxy_pass_header Access-Control-Allow-Methods;
    #proxy_pass_header Access-Control-Allow-Headers;
    #proxy_pass_header Access-Control-Expose-Headers;
    #proxy_pass_header Access-Control-Max-Age;

    # 添加 指定的 response header
    #   当 request header "Origin" 的值 <scheme>://<hostname>:<port> 三个有一个和当前 server 端配置不同，则认为跨域
    #   而 "Referer" 的值为发起当前 request 的 page 的 URL，格式为: <scheme>://<hostname>:<port>/<path>?<queryString>
    #
    # @doc Headers: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials
    # @doc Nginx:   https://nginx.org/en/docs/http/ngx_http_headers_module.html#add_header
    # @doc {默认的 Access-Control-Expose-Headers} https://developer.mozilla.org/en-US/docs/Glossary/CORS-safelisted_response_header
    #
    # @trap 需要和 cloud-svc/cloud-config/src/main/resources/cloud-gateway/prod/cloud-gateway-prod.yml 中的 cors 配置保持一致
    # @trap 跨域请求是针对整个 server , 不能单单允许指定的 path(http://example.com/path) 跨域访问
    # @trap 当 Access-Control-Allow-Credentials 值为 true 时，
    #       Access-Control-Allow-Origin 不能配置成 *，必须指定一个域名，例如: example.com，
    #       allowedMethods, allowedHeaders, exposedHeaders 同理
    #       这是为了确保安全性，防止未经授权的访问
    # @trap 非 CORS 请求，在 status code 非 2xx 时，Client JS 是可以读取到 status code，request header, response body 等信息的
    #       但是如果是 CORS 请求，当服务器返回错误状态码（如 401、403 等）时，浏览器会对 Client JS 屏蔽所有 响应信息，以防止潜在的安全风险
    #add_header Access-Control-Allow-Credentials 'true';  # 只能为 true 不能为 false，如果 false，则直接不配置该 header
    add_header Access-Control-Allow-Origin '*';
    add_header Access-Control-Allow-Methods '*';
    add_header Access-Control-Allow-Headers '*';
    add_header Access-Control-Expose-Headers 'WWW-Authenticate, Content-Disposition, x-kasei-jws, x-kh-nginx';
    add_header Access-Control-Max-Age '600';



    ################################ 前端 URL 路径映射配置 ################################
    root            /usr/share/nginx/apps/bpm;           # 默认映射路径，当 location 中没有配置 root 时生效

    location / {
        index  index.html;
    }

    location /bpm-ppe {
        # BPM PPE 通用页面：admin + editor(渲染引擎)
        index  index.html;
    }

    location /bpm-ppe-lib {
        # BPM PPE 渲染引擎的自定义页面
        index  index.html;
    }

    location /bpm-portal {
        # BPM 门户前端代码存放位置
        index  index.html;
    }


    location /bpm-app-one {
        # BPM 应用前端代码存放位置
        index  index.html;
    }

    ################################ 后端 API ################################
    ################ 直接发送到 cloud-oidc-rp 上
    location /login {
        proxy_pass http://cloud-oidc-rp:8910;
    }
    location /oauth2-login {
        proxy_pass http://cloud-oidc-rp:8910;
    }
    location /logout {
        proxy_pass http://cloud-oidc-rp:8910;
    }
    location /oauth2 {
        proxy_pass http://cloud-oidc-rp:8910;
    }

    ################ 请求直接转发到 cloud-gateway 上
    location /api/ {
        proxy_pass http://cloud-gateway:8999/;
    }

    ################ 请求直接转发到 cloud-consul 上
    location /consul/ {

        location = /consul/v1/agent/services {
            rewrite ^/consul(.*)$ $1 break;        # 重写 URL 的方式
            proxy_pass http://cloud-consul:8500;
        }
    }





}

